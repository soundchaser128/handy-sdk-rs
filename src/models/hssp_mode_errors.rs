/*
 * Handy API v2.0.0
 *
 * API to interact with the 'TheHandy'. <p> <b>IMPORTANT</b>: This API is compatible with devices running firmware version 3 (v3) only. See note below on how to deal with firmware version 2 (v2) devices with this API. <p> <h3>Join the community</h3> Send us a mail or add us on discord for a more technical chat - **Handy#8756**<br> Follow us on Reddit for updates and announcements: https://www.reddit.com/r/theHandy/ <p> <h3>Server selection</h3> When using the API make sure you connect to the server environment that the device you are trying to interact with is connected to.<br> For most users this will be the production environment API server: <b>https://www.handyfeeling.com/api/handy/v2</b><br> If you have been given special access to firmware that connects to the staging environment, you should use the staging environment API server: <b>https://staging.handyfeeling.com/api/handy/v2</b><br> <p> <h3>Handling firmware v2 devices</h3> Users with firmware v2 devices are required to update their device to firmware v3 before the device can be fully used with this API.<br> To ease this process, two of the endpoints in this API can be used with firmware v2 devices:<br> <ul> <li><code>/connected</code> - Check online status of a device.</li> <li><code>/info</code> - Get general information about the device.</li> </ul> All other endpoints will always return a 'Machine not connected' error if you try to use them with a firmware v2 device.<br><br> For v2 devices it's important to handle the fwStatus returned from the <code>/info</code> endpoint properly.<br> v2 devices will always have fwStatus = UPDATE_REQUIRED(2). See <code>/info</code> documentation for more details.<br><br> When using the API with a device, you should always start by verifying that the device have a firmware that is compatible with the API you are using in your service.<br> An example flow could look like this: <ol> <li>Check if device is conncted with <code>/connected</code></li> <li>Check device firmware status with <code>/info</code></li> <li>If a firmware update is required, forward the user to <a href=\"https://www.handfyfeeling.com\">https://www.handfyfeeling.com</a> so they can easily update the device firmware.</li> <li>Continue your service when the firmware status returned in <code>/info</code> is UP_TO_DATE(0).</li> </ol> <p> <h3>Mode specific operations</h3> Operations in <b>BASE</b>, <b>SLIDE</b>, <b>TIMESYNC</b> and <b>HSTP</b> are mode independent and available at any time.<br> Other operations are only available in a specific mode (eg. <b>HAMP</b>, <b>HDSP</b>, <b>HSSP</b>).<br> To access these operations, the device have to first be put in the specific mode (see <code>/mode</code>).<br> If you execute an operation not available in the current mode of the device, you will receive a 'No such method' error response. <!--See live samples of use cases here: 'https://www.handyfeeling.com/api/handy/v2/demo/ -->
 *
 * The version of the OpenAPI document: 2.0.0-beta-3
 * Contact: lars@sweettech.no
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// HsspModeErrors : The different possible HSSP mode specific error codes. <p> <ul> <li>ERROR(4000) - Unspecified HSSP error.</li> <li>DOWNLOAD_FAILED(4001) - The device could not download the specified script.</li> <li>HASH_ERROR(4002) - Script hash validation error</li> <li>SYNC_REQUIRED(4003) - The device need to resync with the server before HSSP setup can be peformed. Only returned from devices running firmware version <= 3.1.x</li> <li>TOKEN_ERROR(4004) - Unspecified token error. Check error response data property for chained error info.</li> <li>MAX_SCRIPT_SIZE_ERROR(4005) - The script is too large for the device. The maximum supported CSV file size is 524288 bytes.</li> <li>DEVICE_STORAGE_FULL_ERROR(4006) - The setup failed because the device storage is full.</li> <li>DEVICE_STORAGE_FREE_ERROR(4007) - The setup failed. Not enough space left to store the script on the device.</li> <li>DEVICE_STORAGE_CLEAN_ERROR(4008) - The setup failed. An attempt to free up device space failed.</li> </ul>
/// The different possible HSSP mode specific error codes. <p> <ul> <li>ERROR(4000) - Unspecified HSSP error.</li> <li>DOWNLOAD_FAILED(4001) - The device could not download the specified script.</li> <li>HASH_ERROR(4002) - Script hash validation error</li> <li>SYNC_REQUIRED(4003) - The device need to resync with the server before HSSP setup can be peformed. Only returned from devices running firmware version <= 3.1.x</li> <li>TOKEN_ERROR(4004) - Unspecified token error. Check error response data property for chained error info.</li> <li>MAX_SCRIPT_SIZE_ERROR(4005) - The script is too large for the device. The maximum supported CSV file size is 524288 bytes.</li> <li>DEVICE_STORAGE_FULL_ERROR(4006) - The setup failed because the device storage is full.</li> <li>DEVICE_STORAGE_FREE_ERROR(4007) - The setup failed. Not enough space left to store the script on the device.</li> <li>DEVICE_STORAGE_CLEAN_ERROR(4008) - The setup failed. An attempt to free up device space failed.</li> </ul>
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HsspModeErrors {
    #[serde(rename = "4000")]
    Error,
    #[serde(rename = "4001")]
    DownloadFailed,
    #[serde(rename = "4002")]
    HashError,
    #[serde(rename = "4003")]
    SyncRequired,
    #[serde(rename = "4004")]
    TokenError,
    #[serde(rename = "4005")]
    MaxScriptSizeError,
    #[serde(rename = "4006")]
    DeviceStorageFullError,
    #[serde(rename = "4007")]
    DeviceStorageFreeError,
    #[serde(rename = "4008")]
    DeviceStorageCleanError,
}

impl ToString for HsspModeErrors {
    fn to_string(&self) -> String {
        match self {
            Self::Error => String::from("4000"),
            Self::DownloadFailed => String::from("4001"),
            Self::HashError => String::from("4002"),
            Self::SyncRequired => String::from("4003"),
            Self::TokenError => String::from("4004"),
            Self::MaxScriptSizeError => String::from("4005"),
            Self::DeviceStorageFullError => String::from("4006"),
            Self::DeviceStorageFreeError => String::from("4007"),
            Self::DeviceStorageCleanError => String::from("4008"),
        }
    }
}

impl Default for HsspModeErrors {
    fn default() -> HsspModeErrors {
        Self::Error
    }
}
